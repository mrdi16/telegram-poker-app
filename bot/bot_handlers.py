import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from game.table_manager import PokerTable
from game.player_manager import Player
from admin.chip_manager import ChipManager
from admin.admin_tools import AdminTools
from admin.admin_logger import AdminLogger
from bot.keyboard import *

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
tables = {}
active_games = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
chip_manager = ChipManager()
admin_logger = AdminLogger()
admin_tools = AdminTools(chip_manager, admin_logger)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PokerBot, {user.first_name}!

‚ô†Ô∏è –ò–≥—Ä–∞–π—Ç–µ –≤ –¢–µ—Ö–∞—Å—Å–∫–∏–π –•–æ–ª–¥–µ–º —Å –¥—Ä—É–∑—å—è–º–∏!
üí∞ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏, —Ä–µ–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_menu_keyboard())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "quick_game":
        await show_table_limits(query, context)
    
    elif data.startswith("limit_"):
        limit = int(data.split("_")[1])
        await join_quick_game(query, context, limit)
    
    elif data == "private_table":
        await create_private_table(query, context)
    
    elif data == "stats":
        await show_stats(query, context, user_id)
    
    elif data == "rules":
        await show_rules(query, context)
    
    elif data.startswith("action_"):
        await handle_game_action(query, context, data)
    
    elif data.startswith("admin_"):
        await handle_admin_action(query, context, data, user_id)
    
    elif data == "back_main":
        await start_callback(query, context)

async def show_table_limits(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ª–∏–º–∏—Ç–æ–≤"""
    text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —Å—Ç–æ–ª–∞:"
    await query.edit_message_text(text, reply_markup=get_table_limit_keyboard())

async def join_quick_game(query, context, limit: int):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±—ã—Å—Ç—Ä–æ–π –∏–≥—Ä–µ"""
    user = query.from_user
    user_id = user.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª
    table_key = f"quick_{limit}"
    if table_key not in tables:
        tables[table_key] = PokerTable(table_id=len(tables) + 1, limit=limit)
    
    table = tables[table_key]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    is_admin = (user_id == context.bot_data.get('admin_id', 0))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    success = table.player_manager.add_player(user_id, user.first_name, 1000, is_admin=is_admin)
    
    if success:
        text = f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å—Ç–æ–ª—É ${limit}\nüë• –ò–≥—Ä–æ–∫–æ–≤: {len(table.player_manager.players)}/6"
        
        # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å 2+ –∏–≥—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        if len(table.player_manager.players) >= 2 and table.stage.name == "WAITING":
            success, message = table.start_hand()
            text += f"\n\nüéÆ {message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            for player in table.player_manager.players:
                try:
                    if player.is_admin:
                        await context.bot.send_message(
                            chat_id=player.user_id,
                            text=format_game_state(table),
                            reply_markup=get_admin_keyboard()
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=player.user_id,
                            text=format_game_state(table),
                            reply_markup=get_game_actions_keyboard()
                        )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")
    else:
        text = "‚ùå –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ —ç—Ç–æ–º—É —Å—Ç–æ–ª—É"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_admin:
        await query.edit_message_text(text, reply_markup=get_admin_keyboard())
    else:
        await query.edit_message_text(text, reply_markup=get_game_actions_keyboard())

async def create_private_table(query, context):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å—Ç–æ–ª"""
    user = query.from_user
    text = "üîí –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!"
    await query.edit_message_text(text, reply_markup=get_main_menu_keyboard())

async def show_stats(query, context, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Å–µ—Ö —Å—Ç–æ–ª–∞—Ö
    player_stats = None
    for table in tables.values():
        player = table.player_manager.get_player(user_id)
        if player:
            player_stats = player
            break
    
    if player_stats:
        text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {player_stats.username}:

üéØ –°—ã–≥—Ä–∞–Ω–æ —Ä—É–∫: {player_stats.hands_played}
üèÜ –ü–æ–±–µ–¥: {player_stats.hands_won}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {player_stats.win_rate:.1f}%
üí∞ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: ${player_stats.biggest_win}
üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${player_stats.chips}
        """
    else:
        text = "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!"
    
    await query.edit_message_text(text, reply_markup=get_main_menu_keyboard())

async def show_rules(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"""
    rules_text = """
üìñ –ü—Ä–∞–≤–∏–ª–∞ –¢–µ—Ö–∞—Å—Å–∫–æ–≥–æ –•–æ–ª–¥–µ–º–∞:

üéØ –¶–µ–ª—å –∏–≥—Ä—ã: –°–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 5 –∫–∞—Ä—Ç.

üÉè –ö–∞—Ä—Ç—ã:
‚Ä¢ –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 2 –∫–∞—Ä—Ç—ã –≤ –∑–∞–∫—Ä—ã—Ç—É—é
‚Ä¢ –ù–∞ —Å—Ç–æ–ª –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è 5 –æ–±—â–∏—Ö –∫–∞—Ä—Ç

üìà –°—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã:
1. –ü—Ä–µ—Ñ–ª–æ–ø - —Ä–∞–∑–¥–∞—é—Ç—Å—è –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
2. –§–ª–æ–ø - –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è 3 –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã
3. –¢—ë—Ä–Ω - 4-—è –æ–±—â–∞—è –∫–∞—Ä—Ç–∞
4. –†–∏–≤–µ—Ä - 5-—è –æ–±—â–∞—è –∫–∞—Ä—Ç–∞
5. –í—Å–∫—Ä—ã—Ç–∏–µ - –∏–≥—Ä–æ–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–∞—Ä—Ç—ã

‚ö° –î–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ Fold - —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—ã, –≤—ã–π—Ç–∏ –∏–∑ —Ä–∞–∑–¥–∞—á–∏
‚Ä¢ Check - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å—Ç–∞–≤–æ–∫)
‚Ä¢ Call - —É—Ä–∞–≤–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
‚Ä¢ Raise - –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É
‚Ä¢ All-in - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏

‚è∞ –ù–∞ —Ö–æ–¥ –¥–∞–µ—Ç—Å—è 60 —Å–µ–∫—É–Ω–¥!
    """
    await query.edit_message_text(rules_text, reply_markup=get_main_menu_keyboard())

async def handle_game_action(query, context, action: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    user_id = query.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª —Å –∏–≥—Ä–æ–∫–æ–º
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –≤ –∏–≥—Ä–µ!", reply_markup=get_main_menu_keyboard())
        return
    
    player = table.player_manager.get_player(user_id)
    action_type = action.replace("action_", "").upper()
    
    if action_type == "FOLD":
        success, message = table.make_action(player, table.player_manager.players[0].__class__.PlayerAction.FOLD)
    elif action_type == "CHECK":
        success, message = table.make_action(player, table.player_manager.players[0].__class__.PlayerAction.CHECK)
    elif action_type == "CALL":
        success, message = table.make_action(player, table.player_manager.players[0].__class__.PlayerAction.CALL)
    elif action_type == "RAISE":
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É —Ä–µ–π–∑–∞
        await query.edit_message_text("üìà –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–π–∑–∞:")
        context.user_data['awaiting_raise'] = True
        context.user_data['current_table'] = table_key
        return
    elif action_type == "ALLIN":
        success, message = table.make_action(player, table.player_manager.players[0].__class__.PlayerAction.ALL_IN)
    elif action_type == "STATUS":
        await send_game_state(table, context, user_id)
        return
    
    if success:
        await query.edit_message_text(f"‚úÖ {message}")
        await send_game_state(table, context)
    else:
        await query.edit_message_text(f"‚ùå {message}")

async def handle_admin_action(query, context, action: str, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id != context.bot_data.get('admin_id'):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    action_type = action.replace("admin_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
        return
    
    if action_type == "show_cards":
        all_cards = admin_tools.get_all_player_cards(table)
        text = "üëÅ –í—Å–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n"
        for player_name, cards in all_cards.items():
            text += f"\n{player_name}: {[str(card) for card in cards]}"
        
        await query.edit_message_text(text, reply_markup=get_admin_keyboard())
    
    elif action_type == "win_probs":
        probs = admin_tools.calculate_win_probabilities(table, simulations=1000)
        text = "üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã:\n"
        for player_name, prob in probs.items():
            text += f"\n{player_name}: {prob:.1f}%"
        
        await query.edit_message_text(text, reply_markup=get_admin_keyboard())
    
    elif action_type == "chips":
        await query.edit_message_text("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–∫–∞–º–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!", reply_markup=get_admin_keyboard())
    
    elif action_type == "reset":
        success, message = admin_tools.reset_game(table, user_id)
        await query.edit_message_text(f"üîÑ {message}", reply_markup=get_admin_keyboard())

async def send_game_state(table, context, specific_user_id=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º"""
    game_text = format_game_state(table)
    
    for player in table.player_manager.players:
        try:
            if specific_user_id and player.user_id != specific_user_id:
                continue
                
            if player.is_admin:
                await context.bot.send_message(
                    chat_id=player.user_id,
                    text=game_text,
                    reply_markup=get_admin_keyboard()
                )
            else:
                await context.bot.send_message(
                    chat_id=player.user_id,
                    text=game_text,
                    reply_markup=get_game_actions_keyboard()
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

def format_game_state(table):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"""
üéØ –°—Ç–æ–ª ${table.limit} | {table.stage.name}

üíµ –ë–∞–Ω–∫: ${table.pot}
üìà –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${table.current_bet}

üÉè –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: {[str(card) for card in table.community_cards]}

üë• –ò–≥—Ä–æ–∫–∏:
"""
    
    for i, player in enumerate(table.player_manager.players):
        status = ""
        if player.folded:
            status = " üì§"
        elif player.all_in:
            status = " üî•"
        elif i == table.current_player_index:
            status = " ‚≠ê"
        
        text += f"\n{player.username}: ${player.chips} (—Å—Ç–∞–≤–∫–∞: ${player.current_bet}){status}"
    
    return text

async def start_callback(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_menu_keyboard())

# WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def webapp_init(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp"""
    user_id = update.effective_user.id
    is_admin = (user_id == context.bot_data.get('admin_id'))
    
    webapp_url = "https://your-domain.com/webapp/index.html"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å Poker Table", web_app=WebAppInfo(url=webapp_url))]
    ]
    
    await update.message.reply_text(
        "üéØ –û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫–µ—Ä–Ω—ã–π —Å—Ç–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user_id = update.effective_user.id
        
        method = data.get('method')
        params = data.get('params', {})
        
        response = await process_webapp_request(user_id, method, params)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ WebApp
        await update.effective_message.reply_text(
            f"‚úÖ {response.get('message', '–£—Å–ø–µ—à–Ω–æ')}",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logging.error(f"WebApp error: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def process_webapp_request(user_id: int, method: str, params: dict) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç WebApp"""
    
    if method == 'join_table':
        return await webapp_join_table(user_id, params)
    elif method == 'get_game_state':
        return await webapp_get_game_state(user_id)
    elif method == 'player_action':
        return await webapp_player_action(user_id, params)
    elif method == 'admin_show_cards':
        return await webapp_admin_show_cards(user_id)
    elif method == 'admin_win_probabilities':
        return await webapp_admin_win_probabilities(user_id)
    elif method == 'admin_reset_game':
        return await webapp_admin_reset_game(user_id)
    else:
        return {'success': False, 'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥'}

async def webapp_join_table(user_id: int, params: dict) -> dict:
    """WebApp: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—Ç–æ–ª—É"""
    limit = params.get('limit', 100)
    table_key = f"quick_{limit}"
    
    if table_key not in tables:
        tables[table_key] = PokerTable(table_id=len(tables) + 1, limit=limit)
    
    table = tables[table_key]
    player = table.player_manager.get_player(user_id)
    
    if not player:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        user = await get_user_info(user_id)  # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        is_admin = (user_id == ADMIN_ID)
        table.player_manager.add_player(user_id, user.get('first_name', 'Player'), 1000, is_admin)
    
    return {'success': True, 'message': '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–æ –∫ —Å—Ç–æ–ª—É'}

async def webapp_get_game_state(user_id: int) -> dict:
    """WebApp: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª —Å –∏–≥—Ä–æ–∫–æ–º
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        return {'success': False, 'message': '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ —Å—Ç–æ–ª–æ–º'}
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è WebApp
    game_state = {
        'stage': table.stage.name,
        'pot': table.pot,
        'current_bet': table.current_bet,
        'community_cards': [str(card) for card in table.community_cards],
        'players': []
    }
    
    for player in table.player_manager.players:
        player_data = {
            'username': player.username,
            'user_id': player.user_id,
            'chips': player.chips,
            'current_bet': player.current_bet,
            'folded': player.folded,
            'all_in': player.all_in,
            'is_admin': player.is_admin,
            'is_current': (table.player_manager.players[table.current_player_index].user_id == player.user_id),
            'hole_cards': [str(card) for card in player.hole_cards] if player.user_id == user_id else None
        }
        game_state['players'].append(player_data)
    
    return {'success': True, 'game_state': game_state}

async def webapp_player_action(user_id: int, params: dict) -> dict:
    """WebApp: –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞"""
    action = params.get('action')
    amount = params.get('amount', 0)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª —Å –∏–≥—Ä–æ–∫–æ–º
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        return {'success': False, 'message': '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
    
    player = table.player_manager.get_player(user_id)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if action == 'fold':
        success, message = table.make_action(player, PlayerAction.FOLD)
    elif action == 'check':
        success, message = table.make_action(player, PlayerAction.CHECK)
    elif action == 'call':
        success, message = table.make_action(player, PlayerAction.CALL)
    elif action == 'raise':
        success, message = table.make_action(player, PlayerAction.RAISE, amount)
    elif action == 'all_in':
        success, message = table.make_action(player, PlayerAction.ALL_IN)
    else:
        return {'success': False, 'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}
    
    return {'success': success, 'message': message}

async def webapp_admin_show_cards(user_id: int) -> dict:
    """WebApp: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã (–∞–¥–º–∏–Ω)"""
    if user_id != ADMIN_ID:
        return {'success': False, 'message': '–ù–µ—Ç –ø—Ä–∞–≤'}
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª —Å –∞–¥–º–∏–Ω–æ–º
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        return {'success': False, 'message': '–ê–¥–º–∏–Ω –Ω–µ –∑–∞ —Å—Ç–æ–ª–æ–º'}
    
    all_cards = admin_tools.get_all_player_cards(table)
    cards_str = {name: [str(card) for card in cards] for name, cards in all_cards.items()}
    
    return {'success': True, 'cards': cards_str}

async def webapp_admin_win_probabilities(user_id: int) -> dict:
    """WebApp: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã (–∞–¥–º–∏–Ω)"""
    if user_id != ADMIN_ID:
        return {'success': False, 'message': '–ù–µ—Ç –ø—Ä–∞–≤'}
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª —Å –∞–¥–º–∏–Ω–æ–º
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        return {'success': False, 'message': '–ê–¥–º–∏–Ω –Ω–µ –∑–∞ —Å—Ç–æ–ª–æ–º'}
    
    probabilities = admin_tools.calculate_win_probabilities(table)
    prob_str = {name: f"{prob:.1f}" for name, prob in probabilities.items()}
    
    return {'success': True, 'probabilities': prob_str}

async def webapp_admin_reset_game(user_id: int) -> dict:
    """WebApp: —Å–±—Ä–æ—Å –∏–≥—Ä—ã (–∞–¥–º–∏–Ω)"""
    if user_id != ADMIN_ID:
        return {'success': False, 'message': '–ù–µ—Ç –ø—Ä–∞–≤'}
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª —Å –∞–¥–º–∏–Ω–æ–º
    table = None
    for t in tables.values():
        if t.player_manager.get_player(user_id):
            table = t
            break
    
    if not table:
        return {'success': False, 'message': '–ê–¥–º–∏–Ω –Ω–µ –∑–∞ —Å—Ç–æ–ª–æ–º'}
    
    success, message = admin_tools.reset_game(table, user_id)
    return {'success': success, 'message': message}

async def get_user_info(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    return {'first_name': f'Player{user_id}'}